#include<stdlib.h>
#include <GL/glut.h>
#include<stdio.h>
#include<conio.h>

struct cub{
	float x;
	float y;
	float z;
	float r;
	float g;
	float b;
	float movex;
	float movez;
	int status;
	int lose;
	int win;
};
struct cub arr[5];


void init_cub()
{
	arr[0].x = -3.5;
	arr[0].y = 0.5;
	arr[0].z = -3.5;
	arr[0].movex = 0.001;
	arr[0].movez = 0.0003;
	arr[0].status = 0;
	arr[0].lose = 0;
	arr[0].win = 0;


	arr[1].x = 3.5;
	arr[1].y = 0.5;
	arr[1].z = -3.5;
	arr[1].movex = 0.0009;
	arr[1].movez = 0.0003;
	arr[1].status = 0;
	arr[1].lose = 0;
	arr[1].win = 0;

	arr[2].x = 3.5;
	arr[2].y = 0.5;
	arr[2].z = 3.5;
	arr[2].movex = 0.0018;
	arr[2].movez = 0.001;
	arr[2].status = 0;
	arr[2].lose = 0;
	arr[2].win = 0;

	arr[3].x = -3.5;
	arr[3].y = 0.5;
	arr[3].z = 3.5;
	arr[3].movex = 0.0008;
	arr[3].movez = 0.0003;
	arr[3].status = 0;
	arr[3].lose = 0;
	arr[3].win = 0;

	arr[4].x = 0;
	arr[4].y = 0.5;
	arr[4].z = 0;
	arr[4].movex = 0.002;
	arr[4].movez = 0.0022;
	arr[4].status = 0;
	arr[4].lose = 0;
	arr[4].win = 0;
}




int rot = 0, rotup = 0, rotbottom = 40;
float stick_z=0;
char *str = "YOU WON!! :)", *str2 = "OH NO! GAME OVER :(", scr[100];


int crash(int j)
{
	int flag = 0;
	for (int i = 0; i < 5; i++)
	{
		if (j != i)
		{
			if ((arr[j].x >(arr[i].x + 0.8) && arr[j].x < (arr[i].x + 1)) && arr[j].z >(arr[i].z - 1) && arr[j].z < (arr[i].z + 1) && arr[i].y>0.24)
				flag = 1;
			else
				if ((arr[j].x<(arr[i].x - 0.8) && arr[j].x >(arr[i].x - 1)) && arr[j].z > (arr[i].z - 1) && arr[j].z < (arr[i].z + 1) && arr[i].y>0.24)
					flag = 2;
				else
					if ((arr[j].x > (arr[i].x - 1) && arr[j].x < (arr[i].x + 1)) && arr[j].z >(arr[i].z + 0.8) && arr[j].z < (arr[i].z + 1) && arr[i].y>0.24)
						flag = 3;
					else
						if ((arr[j].x > (arr[i].x - 1) && arr[j].x < (arr[i].x + 1)) && arr[j].z >(arr[i].z - 1) && arr[j].z < (arr[i].z - 0.8) && arr[i].y>0.24)
							flag = 4;
		}
	}
	return flag;

}


void keyboard(unsigned char key, int x, int y)
{
	if (key == 27)exit(1);
	if (key == 'r')
	{
		rot += 5;
		rot %= 360;
	}
	if (key == 'u')
	{
		rotup += 5;
		rotup %= 360;
	}
	if (key == 'b')
	{
		rotbottom -= 5;
		rotbottom %= 360;
	}


	if (key == 'w')
	{
		if (stick_z-2 >= -6.5)
			stick_z -= 0.3;
	}
	if (key == 's')
	{
		if (stick_z+2 <= 6.5)
			stick_z += 0.3;
	}

	if (key == 'p')
	{

		for (int i = 0; i < 5; i++)
		{

			arr[i].movex += 0.001;
			arr[i].movez += 0.001;
		}
	}
	/*
	if (key == 'm')
	{
	for (int i = 0; i < 5; i++)
	{
	if (!(arr[i].movex <= 0 || arr[i].movez <= 0))
	{
	arr[i].movex -= 0.001;
	arr[i].movez -= 0.001;

	}
	}
	}*/

	glutPostRedisplay();
}


int checkHole(int i)
{
	if ((arr[i].x >= 5 && arr[i].x <= 6.75 && arr[i].z >= -2.25 && arr[i].z <= -0.5) || (arr[i].x >= 2 && arr[i].x <= 3.75 && arr[i].z >= 3.75 && arr[i].z <= 5.5))
	{
		return 1;
	}
	return 0;
}

void regel()
{
	glBegin(GL_QUADS);
	// Front
	glNormal3f(0, 0, 0.5);
	glVertex3f(-0.5, 0, 0.5);
	glVertex3f(-0.5, -5, 0.5);
	glVertex3f(0.5, -5, 0.5);
	glVertex3f(0.5, 0, 0.5);

	// Back
	glNormal3f(0, 0, -0.5);
	glVertex3f(-0.5, 0, -0.5);
	glVertex3f(0.5, 0, -0.5);
	glVertex3f(0.5, -5, -0.5);
	glVertex3f(-0.5, -5, -0.5);

	// Left side
	glNormal3f(-0.5, 0, 0);
	glVertex3f(-0.5, 0, 0.5);
	glVertex3f(-0.5, -5, 0.5);
	glVertex3f(-0.5, -5, -0.5);
	glVertex3f(-0.5, 0, -0.5);

	// Right side
	glNormal3f(0.5, 0, 0);
	glVertex3f(0.5, 0, 0.5);
	glVertex3f(0.5, 0, -0.5);
	glVertex3f(0.5, -5, -0.5);
	glVertex3f(0.5, -5, 0.5);
	glEnd();
}


void backCutions()
{
	glBegin(GL_QUADS);
	// Front
	glNormal3f(0, 0, 0.5);
	glVertex3f(-8, 1, 0.5);
	glVertex3f(-8, -0.5, 0.5);
	glVertex3f(8, -0.5, 0.5);
	glVertex3f(8, 1, 0.5);

	// Back
	glNormal3f(0, 0, -0.5);
	glVertex3f(-8, 1, -0.5);
	glVertex3f(8, 1, -0.5);
	glVertex3f(8, -0.5, -0.5);
	glVertex3f(-8, -0.5, -0.5);

	// Left side
	glNormal3f(-0.5, 0, 0);
	glVertex3f(-8, 1, 0.5);
	glVertex3f(-8, -0.5, 0.5);
	glVertex3f(-8, -0.5, -0.5);
	glVertex3f(-8, 1, -0.5);

	// Right side
	glNormal3f(0.5, 0, 0);
	glVertex3f(8, 1, 0.5);
	glVertex3f(8, 1, -0.5);
	glVertex3f(8, -1, -0.5);
	glVertex3f(8, -1, 0.5);
	//top
	glVertex3f(-8, 1, -0.5);
	glVertex3f(8, 1, -0.5);
	glVertex3f(8, 1, 0.5);
	glVertex3f(-8, 1, 0.5);
	glEnd();
}

void sideCutions()
{
	glBegin(GL_QUADS);
	// Front
	glNormal3f(0, 0, 0.5);
	glVertex3f(0.5, 1, -8);
	glVertex3f(0.5, -0.5, -8);
	glVertex3f(0.5, -0.5, 8);
	glVertex3f(0.5, 1, 8);

	// Back
	glNormal3f(0, 0, -0.5);
	glVertex3f(-0.5, 1, -8);
	glVertex3f(-0.5, 1, 8);
	glVertex3f(-0.5, -0.5, 8);
	glVertex3f(-0.5, -0.5, -8);

	// Left side
	glNormal3f(-0.5, 0, 0);
	glVertex3f(0.5, 1, -8);
	glVertex3f(0.5, -0.5, -8);
	glVertex3f(-0.5, -0.5, -8);
	glVertex3f(-0.5, 1, -8);

	// Right side
	glNormal3f(0.5, 0, 0);
	glVertex3f(0.5, 1, 8);
	glVertex3f(-0.5, 1, 8);
	glVertex3f(-0.5, -0.5, 8);
	glVertex3f(0.5, -0.5, 8);
	//top
	glVertex3f(-0.5, 1, -8);
	glVertex3f(-0.5, 1, 8);
	glVertex3f(0.5, 1, 8);
	glVertex3f(0.5, 1, -8);
	glEnd();
}


void blackHole()
{
	glBegin(GL_QUADS);
	glColor3f(0.0, 0.0, 0.0);
	glNormal3f(0, 1, 0);	// normal straight up
	glVertex3f(-1, 0, 0.75);
	glVertex3f(0.75, 0, 0.75);
	glVertex3f(0.75, 0, 2.5);
	glVertex3f(-1, 0, 2.5);
	glEnd();
}

void stick()
{
	glBegin(GL_QUADS);
	// Front
	glNormal3f(0, 0, 1);
	glVertex3f(-7.3, 0.3, stick_z+2);
	glVertex3f(-7.3, 0, stick_z + 2);
	glVertex3f(-6.7, 0, stick_z + 2);
	glVertex3f(-6.7, 0.3, stick_z + 2);

	// Back
	glNormal3f(0, 0, 1);
	glVertex3f(-7.3, 0.3, stick_z - 2);
	glVertex3f(-7.3, 0, stick_z - 2);
	glVertex3f(-6.7, 0, stick_z - 2);
	glVertex3f(-6.7, 0.3, stick_z - 2);

	// Left side
	glNormal3f(-0.5, 0, 0);
	glVertex3f(-6.7, 0.3, stick_z - 2);
	glVertex3f(-6.7, 0, stick_z - 2);
	glVertex3f(-6.7, 0, stick_z + 2);
	glVertex3f(-6.7, 0.3, stick_z + 2);

	// Right side
	glNormal3f(-0.5, 0, 0);
	glVertex3f(-7.3, 0.3, stick_z - 2);
	glVertex3f(-7.3, 0, stick_z - 2);
	glVertex3f(-7.3, 0, stick_z + 2);
	glVertex3f(-7.3, 0.3, stick_z + 2);
	//top
	glVertex3f(-7.3, 0.3, stick_z - 2);
	glVertex3f(-6.7, 0.3, stick_z - 2);
	glVertex3f(-6.7, 0.3, stick_z + 2);
	glVertex3f(-7.3, 0.3, stick_z + 2);
	glEnd();

}

void room()
{
	//FLOOR
	glColor3f(0.8, 0.8, 0.75); //205-205-193	
	glNormal3f(0, 1, 0);	// normal straight up
	glVertex3f(-15, -5, -15);
	glVertex3f(15, -5, -15);
	glVertex3f(15, -5, 15);
	glVertex3f(-15, -5, 15);

	//LeftSideWall
	glColor3f(0.8, 0.8, 0.75); //205-205-193	
	glNormal3f(1, 0, 0);	// normal straight up
	glVertex3f(-15, -5, -15);
	glVertex3f(-15, 15, -15);
	glVertex3f(-15, 15, 15);
	glVertex3f(-15, -5, 15);

	//RightSideWall
	glColor3f(0.8, 0.8, 0.75); //205-205-193	
	glNormal3f(1, 0, 0);	// normal straight up
	glVertex3f(15, -5, -15);
	glVertex3f(15, 15, -15);
	glVertex3f(15, 15, 15);
	glVertex3f(15, -5, 15);

	//BackeWall
	glColor3f(1, 0.8, 0.75); //205-205-193	
	glNormal3f(0, 0, 1);	// normal straight up
	glVertex3f(-15, -5, -15);
	glVertex3f(-15, 15, -15);
	glVertex3f(15, 15, -15);
	glVertex3f(15, -5, -15);

	//Ceiling
	//glColor3f(0.8, 0.8, 0.75);  //205-205-193	
	//glNormal3f(0, 1, 0);	// normal straight up
	//glVertex3f(-15, 15, -15);
	//glVertex3f(-15, 15, 15);
	//glVertex3f(15, 15, 15);
	//glVertex3f(15, 15, -15);

	glEnd();
}
void drawCubes()
{
	int i;
	for (i = 0; i < 5; i++)
	{
		switch (i)
		{
		case 0: arr[i].r = 0.1; arr[i].g = 0.9; arr[i].b = 0.6;
			break;
		case 1: arr[i].r = 0.5; arr[i].g = 0.2; arr[i].b = 1;
			break;
		case 2: arr[i].r = 1; arr[i].g = 0.3; arr[i].b = 0.6;
			break;
		case 3: arr[i].r = 0.6; arr[i].g = 0.6; arr[i].b = 0.6;
			break;
		case 4: arr[i].r = 0.7; arr[i].g = 0; arr[i].b = 0.6;
			break;
		case 5: arr[i].r = 0.4; arr[i].g = 1; arr[i].b = 0.3;
			break;
		default:
			break;
		}
		glTranslatef(arr[i].x, arr[i].y, arr[i].z);
		glColor3f(arr[i].r, arr[i].g, arr[i].b);
		//glutSolidCube(1);
		glutSolidSphere(0.5, 32,32);
		glTranslatef(-arr[i].x, -arr[i].y, -arr[i].z);
	}
}
int checkScore()
{
	int points = 0;
	for (int i = 0; i < 5; i++)
		if (arr[i].win)
			points += 10;
	return points;
}

void draw()
{
	glClear(GL_COLOR_BUFFER_BIT |
		GL_DEPTH_BUFFER_BIT);
	int checkWinning = 0;
	
	glLoadIdentity();
	glTranslatef(0, 0, -30);
	glRotatef(rot, 0, 1, 0);
	glRotatef(rotup, 1, 0, 0);
	glRotatef(rotbottom, 1, 0, 0);
	/************************************************************/


	// TableFloor
	glBegin(GL_QUADS);
	glColor3f(0.93, 0.86, 0.5);
	glNormal3f(0, 1, 0);	// normal straight up
	glVertex3f(-8, 0, -8);
	glVertex3f(8, 0, -8);
	glVertex3f(8, 0, 8);
	glVertex3f(-8, 0, 8);


	room();


	glColor3f(0.644, 0.164, 0.164);

	glTranslatef(-7.5, 0, -7.5);
	regel();
	glTranslatef(7.5, 0, 7.5);

	glTranslatef(-7.5, 0, 7.5);
	regel();
	glTranslatef(7.5, 0, -7.5);

	glTranslatef(7.5, 0, -7.5);
	regel();
	glTranslatef(-7.5, 0, 7.5);

	glTranslatef(7.5, 0, 7.5);
	regel();
	glTranslatef(-7.5, 0, -7.5);

	glTranslatef(0, 0.5, -7.5);
	backCutions();
	glTranslatef(0, -0.5, 7.5);

	glTranslatef(0, 0.5, 7.5);
	backCutions();
	glTranslatef(0, -0.5, -7.5);

	glTranslatef(7.5, 0.5, 0);
	sideCutions();
	glTranslatef(-7.5, -0.5, 0);



	glColor3f(0.2, 0.8, 0.9);
	drawCubes();

	glTranslatef(6, 0.25, -3);
	blackHole();     //First Hole up
	glTranslatef(-6, -0.25, 3);

	glTranslatef(6, -0.05, -3);
	blackHole(); //First Hole bottom
	glTranslatef(-6, 0.05, 3);

	glTranslatef(3, 0.25, 3);
	blackHole(); //Second hole up
	glTranslatef(-3, -0.25, -3);

	glTranslatef(3, -0.05, 3);
	blackHole(); //Second hole bottom
	glTranslatef(-3, 0.05, -3);

	//glTranslatef(-7, 0, 0);
	stick();
//	glTranslatef(7, 0, 0);

	for (int i = 0; i < 5; i++)
	{
		if (checkHole(i) == 1)
		{
			checkWinning += 1;
		}
	}
	if (checkWinning == 5)
	{
		str2 = str;
		glColor3f(1.0, 1.0, 0.0);
		glRasterPos3f(0, 5, 0);
		do glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *str2); while (*(++str2));
	}
	
	
	
	sprintf(scr, "Score: %d", checkScore());
	str2 = scr;
	glColor3f(1.0, 0.0, 0.0);
	glRasterPos3f(0, 10, 0);

	do glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *str2); while (*(++str2));



	glutSwapBuffers();			// display the output
}
void Idle(void)
{
	for (int i = 0; i < 5; i++)
	{
		if (arr[i].y > 0.25)
		{
			if (arr[i].status == 0)
			{
				if (arr[i].x < 6.5 && arr[i].z>-6.5)
				{
					arr[i].x += arr[i].movex;
					arr[i].z -= arr[i].movez;
					if (crash(i) == 2)
						arr[i].status = 1;
					else
						if (crash(i) == 3)
							arr[i].status = 3;
				}
				else
				{

					if (arr[i].z <= -6.5)
						arr[i].status = 3;
					if (arr[i].x >= 6.5)
						arr[i].status = 1;
				}
			}
			if (arr[i].status == 1)
			{
				if (arr[i].x > -6.5 && arr[i].z > -6.5)
				{
					arr[i].x -= arr[i].movex;
					arr[i].z -= arr[i].movez;
					if (crash(i) == 1)
						arr[i].status = 0;
					if (crash(i) == 3)
						arr[i].status = 2;
				}
				else
				{

					if (arr[i].z <= -6.5)
						arr[i].status = 2;
					else if (arr[i].x <= -6.2 && arr[i].z + 0.5 >= stick_z - 2 && arr[i].z - 0.5 <= stick_z + 2)
						arr[i].status = 0;
					else arr[i].status = -2;
				}
			}
			if (arr[i].status == 2)
			{
				if (arr[i].x - 0.5 >= -6.7)
				{

					arr[i].x -= arr[i].movex;
					arr[i].z += arr[i].movez;
					if (arr[i].z >= 6.5)
						arr[i].status = 1;
					if (crash(i) == 2)
						arr[i].status = 0;
					if (crash(i) == 4)
						arr[i].status = 1;
				}
				else
					if (arr[i].z + 0.5 >= stick_z - 2 && arr[i].z - 0.5 <= stick_z + 2)
						arr[i].status = 3;
					else
						arr[i].status = -1; //lost cube


			}
			if (arr[i].status == -1)
			{
				if (arr[i].x + 0.5 > -8)
				{
					arr[i].x -= arr[i].movex;
					if (arr[i].z + 0.5 <= 6.5)
						arr[i].z += arr[i].movez;

					else
						arr[i].z -= arr[i].movez;
				}
				else
					/*if (arr[i].y > -4.5)
						arr[i].y -= 0.004;*/
						arr[i].lose = 1;
			}
			if (arr[i].status == -2)
			{
				if (arr[i].x + 0.5 > -8)
				{
					arr[i].x -= arr[i].movex;
					if (arr[i].z + 0.5 <= 6.5)
						arr[i].z -= arr[i].movez;

					else
						arr[i].z -= arr[i].movez;
				}
				else{
					/*if (arr[i].y > -4.5)
						arr[i].y -= 0.004;*/
					arr[i].lose = 1;
					
				}
			}
			if (arr[i].status == 3)
			{
				if (arr[i].x < 6.5 && arr[i].z < 6.5)
				{
					arr[i].x += arr[i].movex;
					arr[i].z += arr[i].movez;
					if (crash(i) == 2)
						arr[i].status = 2;
					if (crash(i) == 4)
						arr[i].status = 0;
				}
				else
					if (arr[i].x >= 6.5)
						arr[i].status = 2;
					else
						arr[i].status = 0;
			}
		}
		if (checkHole(i) == 1)
		{
			arr[i].win = 1;
			if (arr[i].y >= -4.5)
				arr[i].y -= 0.001;
			
		}
		
		if (arr[i].lose==1)
			if (arr[i].y >= -4.5)
				arr[i].y -= 0.001;
}

	
	draw();
}

	

	

void init()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60, 1.0, 0.1, 100);
	glMatrixMode(GL_MODELVIEW);

	// Lighting parameters

	GLfloat mat_ambdif[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat mat_specular[] = { 0.0, 1.0, 0.0, 0.0 };
	GLfloat mat_shininess[] = { 80.0 };
	GLfloat light_position[] = { 1.0, 1.0, 1.0, 0.0 };
	glClearColor(0.0, 0.0, 0.0, 0.0);


	glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, mat_ambdif);	// set both amb and diff components
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);		// set specular
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);		// set shininess
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);		// set light "position", in this case direction
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);		// active material changes by glColor3f(..)

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_COLOR_MATERIAL);

	glEnable(GL_DEPTH_TEST);
}

int main(int argc, char *argv[])

{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);	// RGB display, double-buffered, with Z-Buffer
	glutInitWindowSize(1000, 1000);					// 500 x 500 pixels
	glutCreateWindow("3D");
	glutDisplayFunc(draw);	// Set the display function
	glutIdleFunc(Idle);
	glutKeyboardFunc(keyboard);					// Set the keyboard function
	init_cub();
	init();
	glutMainLoop();							// Start the main event loop
}


